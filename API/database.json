{
  "notes": [
    {
      "id": 1,
      "title": "React Notes (sage)",
      "date": "2019-10-17",
      "topics": "state, props",
      "instructor": "Brenda Long",
      "content": "A component is created by extending upon the React-component class. You then define the methods for the component, such as render. Inside render, you'll return a description of what you want react to draw on the page.                          There are 2 types of data in react. The first is props. props are external and not controlled by the component itself. they are passed down from components higher up in the hierarchy who also control the data. The other type of data is called state. state is private and can be changed within the component itself. if you want the data in your app to change, for example based on user interactions, it must be stored in componets state somewhere in the app. to initialize state, simply set this.state in the constructor method of the class. to update/modify state, call this.setState, passing in the new state object as the argument.",
      "notebookId": 10,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "id": 2,
      "title": "React Lifecycle method",
      "date": "2019-10-19",
      "topics": "lifecycle methods, componentDidMount",
      "instructor": "Brenda Long",
      "content": "Each component in react has several lifecycle methods that you can override to run code at particular times in the process. Mounting methods are called in the following order when an instance of a component is being created and insterted into the DOM: constructor(), static getDerivedStateFromProps(), render(), componentDidMount(). An update can be caused by changes to props or state. these methods are called in the following order when a component is being re-rendered: static getDerivedStateFromProps(), shouldComponetUpdate(), render(), getSnapshotBeforeUpdate(), componentDidUpdate().                 The unmounting method is called when a component is being removed from the DOM: componentWillUnmount().                going into detail regarding some of the methods.... the render() method is the only required method in a class componet. when called it should examine this.props and this.state and return one of the following elements: react elements, arrays and fragments, portals, strings and numbers, booleans or null.                 componentDidMount() is invoked immediately after a component is mounted. initialization that requires DOM nodes should go here. if you need to load data from a remote endpoint, this is a good place to instantiate the network request. you may call setState() immediately in componentDidMount(). it will trigger an extra rendering, but it will happen before the browser updates the screen. this guarantees that even though the render() will be called twice in this case, the user won't see the intermediate state. ",
      "notebookId": 10,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 4
    },
    {
      "id": 5,
      "title": "Quiz questions and answers",
      "date": "2016-01-25",
      "topics": "dieting, stretching, resistance training",
      "instructor": "Dr. Lewis",
      "content": "1.Dehydration of what percent of body weight will decrease performance? ->1.5%.          2.RM and 1RM mean what? rep max and 1 rep max              3.Rest and recovery occurs between what?  -sets, reps, exercises                    4.Less rest between sets is effective in what?   -increasing muscle size                  5.Difference b/w linear and nonlinear periodization: linear means theres a target date you're shooting for. nonlinear cna change up weekly or every workout.                    6. Define supersetting: doing 2 different exercises for 2 different muscle groups. do push then pull                   7. What does SSC stand for? what does it replace?     -stretch shortening cycle, plyometrics",
      "notebookId": 9,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Intro to physics notes",
      "date": "2019-10-26",
      "topics": "newton's laws, levers, ",
      "instructor": "Professor Wright",
      "content": "Force = mass x acceleration         there are different types of levers. third class levers create speed. second class levers are the most powerful and are your prime accelerators.",
      "notebookId": 5,
      "id": 6,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Femur",
      "date": "2019-10-20",
      "topics": "lower limb, femur",
      "instructor": "Dr. Lewis",
      "content": "the fumur is the longest and heavist bone in the body. it's about one fourth of a person's total height. the femur upper end includes:     head: this is the near spherical portion which forms the ball of the ball and socket hip joint,     neck: this is the narrowed are which connects the head to the body of the femur.          greater and lesser trochanter: projections of bones allowing the attachment of muscles.            the long central shaft of the femur is slightly bowed, being concave on its posterior surface.     the lower end of the femur is made up of two enlarged bony processes, the medial and lateral femoral condyles. These carry the smooth cureved surfaces which articulate with the tibia and patella to form the knee joint.      MUSCLES OF THE FEMUR: osme muscles such as the powerful glute shave their origins in the pelvic bones and so cross the hip joint to insert into the femur. when these muscles contract they cause the hip joint to move, allowing the leg to bend, straighten or move sideways. Other muscles originate on the femur itself and pass down across the knee joint to insert on the tibia or fibula. These muscles allow the knee to bend and straighten. ",
      "notebookId": 4,
      "id": 7,
      "rating": 0
    },
    {
      "id": 8,
      "title": "Tibia and Fibula-Arynnnn",
      "date": "2019-10-11",
      "topics": "tibia, fibula, muscles, lower limb, ligaments",
      "instructor": "Dr. Lewis",
      "content": "The tibia is the much larger bone of the lower leg. its stronger than the fibula as it must bear the weight of the body. The tibia which is the shin-bone, articulates with the thigh bone above, the ankle below and the fibula to the side. the thinner fibula helps to form the ankle joint. The tibia is a long bone and lies along side the fibula on the medial (inner) side and articulates w/ the fibula at its upper and lower ends. the upper end of the tibia is expanded to form the medial and lateral tibial condyles, which articulate with the femoral condyles at the knee joint. the lower end of the tibia is less pronounced than the upper end. it articulates with both the talus and with the lower end of the fibula.          FIBULA: the fibula lays on the lateral side of the tibia. it plays no important part in the knee joint, but it very important support for the ankle. The shaft of the fibula is narrow and bears the grooves and ridges associated w/ its major role as a site of muscle attatchment for the leg.      LIGAMENTS: the procimal (upper) end: just under the knee is the upper joint between the head of the fibula and the underside of the lateral tibial condyle. The joint is surrounded and protected by a fibrous joint capsule, which is strengthened by the anterior and posterior tibiofibular ligaments. The anterior ligaments of the head of the fibula runs from the front of the fibular head across to the front of the lateral tibial condyle. the posterior ligament of the head of the fibula runs in a similar fashion behind the fibular head. other ligaments bind the bones of the lower leg to the femur. the strongest of these are the medial and lateral collateral ligaments of the knee joint, which run vertically down from the femur to the corresponding bone (tibia or fibula) beneath. DISTAL END: the joint b/w the lower ends of the tibia and fibula allows no movement of one bone upon the other. rather, the fibula is bound tightly to the tibia by  fibrous ligaments in order to maintain the stability of the ankle joint. the main ligaments concerned are the ant and post tib-fib ligaments. other ligaments around the ankle bind the tibia and fibula to the bones of the foot.",
      "notebookId": 4,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Lifting safely",
      "date": "2019-02-26",
      "topics": "exercise, resistance training, warm up, cool down, stretching, ",
      "instructor": "Dr. Lewis",
      "content": "you should warm up before lifting with at least 5-10 minutes of light cardio. 1-2 light warm up sets at 50%RM shouldnt be counted in total sets. Cool down is extremely important. it helps the body bounce back, helps muscles recover. 5-10 minutes of upper/lower aerobic activity should suffice. STRETCHING: improves muscular flexibility and good range of motion. helps LBP. stretch following cool down activities. Resistance training improves muscle strength and health along with strengthening bones, tendons and ligaments. THe 4 basic types of stretching include: 1. static stretching (makes muscle weaker)   2.Ballistic stretching: usually done by high end athletes, also called bounce stretching       3.Partner Stretching: most dangerous type of stretching and should be avoided      4.Proprioceptive Neuromuscular Facilitation: aka PNF",
      "notebookId": 9,
      "id": 9,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Best tricks for css (taylor)",
      "date": "2019-7-26",
      "topics": "css, positioning, ",
      "instructor": "Michael Conrad",
      "content": "if you want control over wherean element lives on our website at all times, absolute positioning is the key to making this happen. If you think of your browser as one big bounding box, absolute positioning allows you to control exactly where in that box an element will stay. Use top, right, bottom and left, accompanied by a pixel value to control where an element stays. Setting the position to absolute can also happen in a div.        CENTERING: 1.text: text is centered using the text-align: center. if you want it to either side use left or right instead of center. 2.Content: a div or any other element can be centered by adding the block property to it, and then using auto margins. the css would look like.... display:block; margin:auto;      HOVER EFFECTS: this is usef for buttons, text links, block sections of your site, icons and more. if you want something to change colors when someone hovers their mouse over it, use the same CSS bu add :hover to it and change the styling. here's an example:  .entry h2{  font-size:36px; color: red; font-weight: 800; } .entry h2:hover{ color: gray; }....... TRANSITIONS:       for hover effects like w/ menus or images in your website, you dont want colors snapping too quickly to the end result. you ideally want to ease the change in gradually, which is where the transition property comes into play. example:    .entry h2:hover{  color: gray; transition: all 0.3s ease;   }   this makes the change happen over .3 seconds, instead of just instantly snapping to red.......BOX SIZING: box-sizing: border-box is a favorite among many web designers, because it solves the problem of padding and layout issues. Basically, when you set a box to a specific width, and add padding to it, the padding adds to the size of the box. However, with box-sizing:border-box;, this is negated, and boxes stay the size they are meant to be. ...........:before      this CSS selector is a selector that allows you to  choose a CSS element and insert content before every element w/ a specific class applied to it. lets say you had a website where you wanted specific text before every H2 tag. you would use this set up. this is extremely handy, especially if you're using an icon font.",
      "notebookId": 10,
      "id": 10,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "labtime react notes (taylor)",
      "date": "2019-10-26",
      "topics": "classes, arrow functions, variables ",
      "instructor": "Brenda",
      "content": "a class is a type of function, but instead of using the keyword function to initiate it, we use the keyword class and the properties are assigned inside a constructor() method. you can also add your own methods in a class. create a method named present ......... class Car { constructor(name) {this.brand = name; }      present() { return 'I have a ' + this.brand; } }   mycar = new Car('Ford'); mycar.present();      as you can see in the example, you call the method by referring to the object's name followed by parentheses which contain the paramenters.   ............CLASS INHERITANCE: to create a class inheritance, use the extends keyword. a class created w/ a class inheritance inherits all the methods from another class.      .............THIS: the handling of this is also different in arrow functions compared to regular functions. w/ arrow functions there are no binding of this. in regular functions the this keyword represented the object that called the function, which could be the window, doc, button etc. w/ arrow function the this keyword always represents the object that defined the arrow function",
      "notebookId": 7,
      "id": 11,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Components-phil",
      "date": "2019-10-05",
      "topics": "react, props, components ",
      "instructor": "Brenda",
      "content": "components are independent and reusable bits of code. they serve the same purpose as JS functions, but work in isolation and returns HTML via a render function.  Components come in 2 types, class components and function components.   CLASS COMPONENTS: when creating a react component the components name must start w/ an upper case letter. the component has to include the extends react.Component statement, this statement creates an inheritance to React.Component, and gives your component access to React.Component's functions. THe component also requires a render() method, this method returns HTML............  COMPONENT CONSTRUCTOR. if theres a constructor() fxn in your component this fxn will be called when the component gets initiated. the constructor function is where you initiate the components properties. in react, component properties should be kept in an object called state. another way of handling component properties is by using props. props are like functioning arguments, and you send them into the component as attributes. example: use an attribute to pass a color to the car component and use it in the render() fxn:......    class Car extends React.Component {  render() {    return <h2>I am a {this.props.color} car!</h2>; }} ReactDOM.render(<Car color='red'/>, document.getElementById('root')); .........props are also how you pass date from one component to another as parameters. ",
      "notebookId": 11,
      "id": 12,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Forms-heidi",
      "date": "2019-10-09",
      "topics": "react, forms, state, objects, components ",
      "instructor": "Brenda",
      "content": "if you want to send parameters into an event handler, you have two options: 1. Make an anonymous arrow function or 2.bind the event handler to this. note that the first argument has to be this. REACT EVENT OBJECT: event handlers have access to the react event that triggered the function. In react, form data is usually handled by the components. When the data is handled by the components, all the data is stored in the component state. you can control changes by adding event handlers in the onChange attribute. Note: you must initialize the state in the constructor method before you can use it. CONDITIONAL RENDERING: if you dont want to display the h1 element until the user has done any input you can add an if statement. you can control the submit action by adding an event handler in the onSubmit attribute. event.preventDefault() is used to prevent the form from actually being submitted. .......MULTIPLE INPUT FIELDS: you can control the values of more than one input field by adding a name attribute to each element. when you initialize the state in the constructor, use the field names. to access the fields in the event handler use the event.target.name and event.target.value syntax. to update the state in the this.setState method, use square brackets [] around the property name...........>TEXTAREA:  in react, the value of a textarea is placed in a value attribute example ...render() { return (   <form> <textarea value={this.state.description} /> <form/> };................ ",
      "notebookId": 13,
      "id": 14,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 4
    },
    {
      "id": 16,
      "title": " Heidi's React Notes 1",
      "date": "2019-10-30",
      "topics": "react, arrow functions",
      "instructor": "brenda",
      "content": "If you’re writing a simple function that just returns JSX, you can use an implicit return. You omit the curly braces and the return keyword and leave the opening and closing parentheses to wrap your JSX. As you learned earlier, including parentheses around JSX is optional, so you may see components simplified even further w/o the parentheses. There’s no real benefit to writing cmopoennts as arrow functions",
      "notebookId": 15,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 2
    },
    {
      "id": 15,
      "title": "Heidi's react notes 2",
      "date": "2019-10-30",
      "topics": ".m,n.bmhjvjlkjlkjlkjll",
      "instructor": "bkhjgfhjdjhhhhh",
      "content": "bhjkvgcfu",
      "notebookId": 15,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 5
    },
    {
      "title": "css tricks-nate",
      "date": "2019-7-26",
      "topics": "css, positioning, ",
      "instructor": "Michael Conrad",
      "content": "if you want control over wherean element lives on our website at all times, absolute positioning is the key to making this happen. If you think of your browser as one big bounding box, absolute positioning allows you to control exactly where in that box an element will stay. Use top, right, bottom and left, accompanied by a pixel value to control where an element stays. Setting the position to absolute can also happen in a div.        CENTERING: 1.text: text is centered using the text-align: center. if you want it to either side use left or right instead of center. 2.Content: a div or any other element can be centered by adding the block property to it, and then using auto margins. the css would look like.... display:block; margin:auto;      HOVER EFFECTS: this is usef for buttons, text links, block sections of your site, icons and more. if you want something to change colors when someone hovers their mouse over it, use the same CSS bu add :hover to it and change the styling. here's an example:  .entry h2{  font-size:36px; color: red; font-weight: 800; } .entry h2:hover{ color: gray; }....... TRANSITIONS:       for hover effects like w/ menus or images in your website, you dont want colors snapping too quickly to the end result. you ideally want to ease the change in gradually, which is where the transition property comes into play. example:    .entry h2:hover{  color: gray; transition: all 0.3s ease;   }   this makes the change happen over .3 seconds, instead of just instantly snapping to red.......BOX SIZING: box-sizing: border-box is a favorite among many web designers, because it solves the problem of padding and layout issues. Basically, when you set a box to a specific width, and add padding to it, the padding adds to the size of the box. However, with box-sizing:border-box;, this is negated, and boxes stay the size they are meant to be. ...........:before      this CSS selector is a selector that allows you to  choose a CSS element and insert content before every element w/ a specific class applied to it. lets say you had a website where you wanted specific text before every H2 tag. you would use this set up. this is extremely handy, especially if you're using an icon font.",
      "notebookId": 6,
      "id": 17,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "id": 18,
      "title": "React Lifecycle phil",
      "date": "2019-10-19",
      "topics": "lifecycle methods, componentDidMount",
      "instructor": "Brenda Long",
      "content": "Each component in react has several lifecycle methods that you can override to run code at particular times in the process. Mounting methods are called in the following order when an instance of a component is being created and insterted into the DOM: constructor(), static getDerivedStateFromProps(), render(), componentDidMount(). An update can be caused by changes to props or state. these methods are called in the following order when a component is being re-rendered: static getDerivedStateFromProps(), shouldComponetUpdate(), render(), getSnapshotBeforeUpdate(), componentDidUpdate().                 The unmounting method is called when a component is being removed from the DOM: componentWillUnmount().                going into detail regarding some of the methods.... the render() method is the only required method in a class componet. when called it should examine this.props and this.state and return one of the following elements: react elements, arrays and fragments, portals, strings and numbers, booleans or null.                 componentDidMount() is invoked immediately after a component is mounted. initialization that requires DOM nodes should go here. if you need to load data from a remote endpoint, this is a good place to instantiate the network request. you may call setState() immediately in componentDidMount(). it will trigger an extra rendering, but it will happen before the browser updates the screen. this guarantees that even though the render() will be called twice in this case, the user won't see the intermediate state. ",
      "notebookId": 11,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 4
    },
    {
      "title": "Forms-quin",
      "date": "2019-10-09",
      "topics": "react, forms, state, objects, components ",
      "instructor": "Brenda",
      "content": "if you want to send parameters into an event handler, you have two options: 1. Make an anonymous arrow function or 2.bind the event handler to this. note that the first argument has to be this. REACT EVENT OBJECT: event handlers have access to the react event that triggered the function. In react, form data is usually handled by the components. When the data is handled by the components, all the data is stored in the component state. you can control changes by adding event handlers in the onChange attribute. Note: you must initialize the state in the constructor method before you can use it. CONDITIONAL RENDERING: if you dont want to display the h1 element until the user has done any input you can add an if statement. you can control the submit action by adding an event handler in the onSubmit attribute. event.preventDefault() is used to prevent the form from actually being submitted. .......MULTIPLE INPUT FIELDS: you can control the values of more than one input field by adding a name attribute to each element. when you initialize the state in the constructor, use the field names. to access the fields in the event handler use the event.target.name and event.target.value syntax. to update the state in the this.setState method, use square brackets [] around the property name...........>TEXTAREA:  in react, the value of a textarea is placed in a value attribute example ...render() { return (   <form> <textarea value={this.state.description} /> <form/> };................ ",
      "notebookId": 14,
      "id": 19,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 4
    },
    {
      "title": "css tricks-quin",
      "date": "2019-7-26",
      "topics": "css, positioning, ",
      "instructor": "Michael Conrad",
      "content": "if you want control over wherean element lives on our website at all times, absolute positioning is the key to making this happen. If you think of your browser as one big bounding box, absolute positioning allows you to control exactly where in that box an element will stay. Use top, right, bottom and left, accompanied by a pixel value to control where an element stays. Setting the position to absolute can also happen in a div.        CENTERING: 1.text: text is centered using the text-align: center. if you want it to either side use left or right instead of center. 2.Content: a div or any other element can be centered by adding the block property to it, and then using auto margins. the css would look like.... display:block; margin:auto;      HOVER EFFECTS: this is usef for buttons, text links, block sections of your site, icons and more. if you want something to change colors when someone hovers their mouse over it, use the same CSS bu add :hover to it and change the styling. here's an example:  .entry h2{  font-size:36px; color: red; font-weight: 800; } .entry h2:hover{ color: gray; }....... TRANSITIONS:       for hover effects like w/ menus or images in your website, you dont want colors snapping too quickly to the end result. you ideally want to ease the change in gradually, which is where the transition property comes into play. example:    .entry h2:hover{  color: gray; transition: all 0.3s ease;   }   this makes the change happen over .3 seconds, instead of just instantly snapping to red.......BOX SIZING: box-sizing: border-box is a favorite among many web designers, because it solves the problem of padding and layout issues. Basically, when you set a box to a specific width, and add padding to it, the padding adds to the size of the box. However, with box-sizing:border-box;, this is negated, and boxes stay the size they are meant to be. ...........:before      this CSS selector is a selector that allows you to  choose a CSS element and insert content before every element w/ a specific class applied to it. lets say you had a website where you wanted specific text before every H2 tag. you would use this set up. this is extremely handy, especially if you're using an icon font.",
      "notebookId": 14,
      "id": 20,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "id": 21,
      "title": "Stephen's note",
      "date": "2019-10-25",
      "topics": "react",
      "instructor": "brenda",
      "content": "react is great ",
      "notebookId": 17,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Abdomen",
      "date": "2018-10-24",
      "topics": "abdominal cavity, pelvic cavity, peritoneum, organs of the abdomen",
      "instructor": "Mrs. Hobby",
      "content": "Abdominopelvic cavity extends from the diaphragm to the bony pelvis. It consists of 2 parts: the abdominal cavity which is the larger superior cavity and the pelvic cavity. The ABDOMINAL CAVITY contains the following……. Stomach, small intestines, large intestines, liver, gallbladder, spleen, pancreas and kidneys. Pelvic cavity contains the Rectum, Sigmoid, Urinary bladder and all of the Reproductive organs. The Peritoneum is part of the abdominopelvic cavity and is a double walled membranous sac that encloses the cavity. It has an inner layer known as the visceral peritoneum and an outer layer known as the parietal peritoneum. The retroperitoneum is the space behind peritoneum. Kidneys and pancreas lie in this space.\n",
      "notebookId": 4,
      "id": 22,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Upper Limb",
      "date": "2018-09-17",
      "topics": "hand, wrist, arm",
      "instructor": "Mrs. Hobby ",
      "content": "The anatomy of the hand aznd fingers consists of 14 phalanges per hand, 5 metacarpals in each hand and 8 carpals in each wrist. Phalanges compose the digits and are numbered 1-5 laterally to medially. There are 3 phalanges in digits 2-5. Two in the first digit aka the thumb and they are named by location. METACARPALS: they compose the palm of the hand. Theyre identified by numbers, laterally to medially. The heads of metacarpals are distal and they articulate with phalanges. Bases are proximal; articulate with carpals. CARPALS: \tTwo rows of four carpals – proximal and distal. The proximal row, lateral to medial consist of: scaphoid, lunate, triquetrum, pisiform. The distal row, lateral to medial consists of: trapezium, trapezoid, capitate, hamate. JOINTS OF THE HAND…….. (1) Interphalangeal (IP) joints Articulations between phalanges. Identified by location and digit number. Classified as synovial, diarthrotic, or freely movable joint, hinge type…. (2)Metacarpophalangeal (MCP) joints: Articulations between the heads of the metacarpals and the proximal phalanges. Identified by number: first, second, third. Classified as synovial, diarthrotic, ellipsoidal type……..(3)\t–\tCarpometacarpal (CMC) joints. Articulations between the bases of the metacarpals and the carpal bones. First CMC joint classified as synovial, diarthrotic, saddle type. Second to fourth CMC joints are gliding types. \t–\tIntercarpal joints. Articulations between the carpal bones. Classified as synovial, diarthrotic, gliding type. ………(4)Radiocarpal joint. Articulation between the carpals and the distal radius. Classified as synovial, diarthrotic, ellipsoidal type.........\n",
      "notebookId": 4,
      "id": 23,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Shoulder girdle",
      "date": "2018-10-23",
      "topics": "shoulder joint, shoulder girdle, clavicle",
      "instructor": "Mrs. Hopper",
      "content": "the SHOULDER GIRDLE consists of the (1) clavicle (2) scapula. It articulates with: Head of humerus (shoulder joint), Manubrium of sternum (sternoclavicular [SC] joint), Each other (acromioclavicular [AC] joint). It FUNCTIONS to connect the upper limb to the trunk of the body. The SHOULDER on the other hand is the articulation of the upper limb with the girdle. Humerus is not considered to be part of the shoulder girdle. Because the upper portion articulates with the shoulder girdle, proximal humeral anatomy is considered in evaluation of radiographs of the shoulder joint. Shoulder joint is considered a diarthrodial classification by function. Synovial classification by structure. It is considered a ball and socket type, capable of all motions.\n……..THE CLAVICLE: Classified as a long bone. Lies just above the first rib. Acromial extremity (lateral end) articulates with acromion on scapula (AC joint). Sternal extremity (medial end) articulates with manubrium of sternum (SC joint). Double curve to body. The curve is much more pronounced in males than females…… THE SCAPULA…..Classified as a flat bone. Forms the posterior portion of the shoulder girdle. Triangular in shape. The scapula has two surfaces: (1) Costal/anterior , (2). Dorsal/posterior. The scapula has three borders: (1) Lateral (2) Medial (3) Superior. And it has three angles (1) Superior (2) Inferior (3) Lateral ",
      "notebookId": 4,
      "id": 24,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "React componentDidMount()",
      "date": "2019-10-15",
      "topics": "componentDidMount(), state, setState, render()",
      "instructor": "Brenda",
      "content": "ComponentDidMount()\nA component's state is an object that can be modified over time in response to user actions, network responses, and anything. State determines how a component renders and behaves. render() is a built in method of React. Another built in method is componentDidMount(). Once a component is loaded and after render is called, componentDidMount() is invoked.componentDidMount() is invoked immediately after a component is mounted. Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request. You may call setState()  immediately in componentDidMount(). It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the render() will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. In most cases, you should be able to assign the initial state in the constructor() instead. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.\n\n",
      "notebookId": 18,
      "id": 25,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "State",
      "date": "2019-10-15",
      "topics": "state, setState",
      "instructor": "Brenda",
      "content": "-setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.\n\nThink of setState() as a request rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. React does not guarantee that the state changes are applied immediately.\n\nsetState() does not always immediately update the component. It may batch or defer the update until later. This makes reading this.state right after calling setState() a potential pitfall. Instead, use componentDidUpdate or a setState callback (setState(updater, callback)), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the updater argument below.\n\nsetState() will always lead to a re-render unless shouldComponentUpdate() returns false. If mutable objects are being used and conditional rendering logic cannot be implemented in shouldComponentUpdate(), calling setState() only when the new state differs from the previous state will avoid unnecessary re-renders.\n\nThe first argument is an updater function with the signature:\n(state, props) => stateChange\n\nstate is a reference to the component state at the time the change is being applied. It should not be directly mutated. Instead, changes should be represented by building a new object based on the input from state and props. For instance, suppose we wanted to increment a value in state by props.step:\n\nthis.setState((state, props) => {\n  return {counter: state.counter + props.step};\n});\n\nBoth state and props received by the updater function are guaranteed to be up-to-date. The output of the updater is shallowly merged with state.\nThe second parameter to setState() is an optional callback function that will be executed once setState is completed and the component is re-rendered. Generally we recommend using componentDidUpdate() for such logic instead.\nYou may optionally pass an object as the first argument to setState() instead of a function:\n",
      "notebookId": 18,
      "id": 26,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "id": 31,
      "title": "Stephen's ComponentDidMount",
      "date": "2019-10-25",
      "topics": "react",
      "instructor": "brenda",
      "content": "ComponentDidMount()\nA component's state is an object that can be modified over time in response to user actions, network responses, and anything. State determines how a component renders and behaves. render() is a built in method of React. Another built in method is componentDidMount(). Once a component is loaded and after render is called, componentDidMount() is invoked.componentDidMount() is invoked immediately after a component is mounted. Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request. You may call setState()  immediately in componentDidMount(). It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the render() will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. In most cases, you should be able to assign the initial state in the constructor() instead. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.\n\n",
      "notebookId": 17,
      "imageURL": "",
      "uploadedFile": "",
      "rating": 0
    },
    {
      "title": "Github Commands",
      "date": "2019-09-10",
      "topics": "github, command line",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573006871/capstone/ti89icxowci1jhp7hobp.png",
      "uploadedFile": {
        "path": "github.png"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 20,
      "id": 32
    },
    {
      "title": "Github Workflow",
      "date": "2019-09-10",
      "topics": "github",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573006923/capstone/jwmtgpqc3l01xn1ezpnf.jpg",
      "uploadedFile": {
        "path": "IMG_0605.jpeg"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 20,
      "id": 33
    },
    {
      "title": "Welcome to nashville Wireframe",
      "date": "2019-09-04",
      "topics": "javascript, group projects",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573006994/capstone/t2sxup7orhnf25leolp3.png",
      "uploadedFile": {
        "path": "welcome_nash_wireframe2.png"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 20,
      "id": 34
    },
    {
      "title": "Login Dependencies",
      "date": "2019-10-15",
      "topics": "react",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573007081/capstone/oe4wo5eayumwx0sq1b6v.png",
      "uploadedFile": {
        "path": "login dependencies.png"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 21,
      "id": 35
    },
    {
      "title": "Nutshell 2 dependencies drawing",
      "date": "2019-10-16",
      "topics": "group project, react, nutshell",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573007159/capstone/ksdsdrl2aae5vblvz2av.jpg",
      "uploadedFile": {
        "path": "nutshell-tree.JPG"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 21,
      "id": 36
    },
    {
      "title": "History",
      "date": "2019-10-02",
      "topics": "history, state, props, objects",
      "imageURL": "",
      "uploadedFile": null,
      "instructor": "Brenda",
      "content": "The term \"history\" and \"history object\" in this documentation refers to the history package, which is one of only 2 major dependencies of React Router (besides React itself), and which provides several different implementations for managing session history in JavaScript in various environments.\nThe following terms are also used. •\t\"browser history\" - A DOM-specific implementation, useful in web browsers that support the HTML5 history API. —> ”hash history\" - A DOM-specific implementation for legacy web browsers. --> “memory history\" - An in-memory history implementation, useful in testing and non-DOM environments like React Native\nhistory objects typically have the following properties and methods: —> length - (number) The number of entries in the history stack —> action - (string) The current action (PUSH, REPLACE, or POP) —> location - (object) The current location. May have the following properties: ==> pathname - (string) The path of the URL. ===> search - (string) The URL query string ===> hash - (string) The URL hash fragment ===> state - (object) location-specific state that was provided to e.g. push(path, state) when this location was pushed onto the stack. Only available in browser and memory history. ~~~~~~> push(path, [state]) - (function) Pushes a new entry onto the history stack. ~~~~> replace(path, [state]) - (function) Replaces the current entry on the history stack ~~~~> go(n) - (function) Moves the pointer in the history stack by n entries ~~~~> goBack() - (function) Equivalent to go(-1) ~~~~> goForward() - (function) Equivalent to go(1) ~~~~> block(prompt) - (function) Prevents navigation (see the history docs). The history object is mutable. Therefore it is recommended to access the location from the render props of <Route>, not from history.location. This ensures your assumptions about React are correct in lifecycle hooks.",
      "notebookId": 21,
      "id": 37
    },
    {
      "title": "State notes (picture)",
      "date": "2019-10-16",
      "topics": "state, setState",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573007924/capstone/wh5gekmdowi0vv7vjtar.png",
      "uploadedFile": {
        "path": "Screen Shot 2019-11-05 at 8.37.46 PM.png"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 21,
      "id": 38
    },
    {
      "title": "Login dependency chart",
      "date": "2019-10-23",
      "topics": "dependency chart",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573008150/capstone/j1citvdy1wm5hp2h8gxq.png",
      "uploadedFile": {
        "path": "login dependencies.png"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 22,
      "id": 39
    },
    {
      "title": "state picture notes",
      "date": "2019-10-18",
      "topics": "state, setState",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573008188/capstone/v4ovcrkmldm76zkabi3z.png",
      "uploadedFile": {
        "path": "Screen Shot 2019-11-05 at 8.37.46 PM.png"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 22,
      "id": 40
    },
    {
      "title": "nutshell 2 dependency tree",
      "date": "2019-10-17",
      "topics": "dependency, picture",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573008238/capstone/insqw87yt2zylo4pggjh.jpg",
      "uploadedFile": {
        "path": "nutshell-tree.JPG"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 22,
      "id": 41
    },
    {
      "title": "History (10/25/19)",
      "date": "2019-10-25",
      "topics": "history, state, react",
      "instructor": "Brenda",
      "content": "The term \"history\" and \"history object\" in this documentation refers to the history package, which is one of only 2 major dependencies of React Router (besides React itself), and which provides several different implementations for managing session history in JavaScript in various environments.\nThe following terms are also used. •\t\"browser history\" - A DOM-specific implementation, useful in web browsers that support the HTML5 history API. —> ”hash history\" - A DOM-specific implementation for legacy web browsers. --> “memory history\" - An in-memory history implementation, useful in testing and non-DOM environments like React Native\nhistory objects typically have the following properties and methods: —> length - (number) The number of entries in the history stack —> action - (string) The current action (PUSH, REPLACE, or POP) —> location - (object) The current location. May have the following properties: ==> pathname - (string) The path of the URL. ===> search - (string) The URL query string ===> hash - (string) The URL hash fragment ===> state - (object) location-specific state that was provided to e.g. push(path, state) when this location was pushed onto the stack. Only available in browser and memory history. ~~~~~~> push(path, [state]) - (function) Pushes a new entry onto the history stack. ~~~~> replace(path, [state]) - (function) Replaces the current entry on the history stack ~~~~> go(n) - (function) Moves the pointer in the history stack by n entries ~~~~> goBack() - (function) Equivalent to go(-1) ~~~~> goForward() - (function) Equivalent to go(1) ~~~~> block(prompt) - (function) Prevents navigation (see the history docs). The history object is mutable. Therefore it is recommended to access the location from the render props of <Route>, not from history.location. This ensures your assumptions about React are correct in lifecycle hooks.",
      "notebookId": 22,
      "id": 42
    },
    {
      "title": "Event Listeners (10/23/19)",
      "date": "2019-10-23",
      "topics": "eventListeners",
      "instructor": "Brenda",
      "content": "Will be the word on plus the type of event youre listening for.\nThe event listener’s value should be a function . Cannot write an if statement and inject it into JSXALL ABOUT ReactDOM.render(). ReactDOM.render() controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when first called. Later calls use React’s DOM diffing algorithm for efficient updates.ReactDOM.render() does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children. ReactDOM.render() currently returns a reference to the root ReactComponent instance. However, using this return value is legacy and should be avoided because future versions of React may render components asynchronously in some cases. If you need a reference to the root ReactComponent instance, the preferred solution is to attach a callback ref to the root element. Using ReactDOM.render() to hydrate a server-rendered container is deprecated and will be removed in React 17. Use hydrate() instead.\n",
      "notebookId": 22,
      "id": 43
    },
    {
      "title": "setState Documentation (10/21)",
      "date": "2019-10-21",
      "topics": "setState, state, react",
      "imageURL": "",
      "uploadedFile": null,
      "instructor": "brenda",
      "content": "-setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses. Think of setState() as a request rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. React does not guarantee that the state changes are applied immediately. setState() does not always immediately update the component. It may batch or defer the update until later. This makes reading this.state right after calling setState() a potential pitfall. Instead, use componentDidUpdate or a setState callback (setState(updater, callback)), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the updater argument below. setState() will always lead to a re-render unless shouldComponentUpdate() returns false. If mutable objects are being used and conditional rendering logic cannot be implemented in shouldComponentUpdate(), calling setState() only when the new state differs from the previous state will avoid unnecessary re-renders. The first argument is an updater function with the signature:\n(state, props) => stateChange state is a reference to the component state at the time the change is being applied. It should not be directly mutated. Instead, changes should be represented by building a new object based on the input from state and props. For instance, suppose we wanted to increment a value in state by props.step:\nthis.setState((state, props) => {\n  return {counter: state.counter + props.step};\n}); Both state and props received by the updater function are guaranteed to be up-to-date. The output of the updater is shallowly merged with state.\nThe second parameter to setState() is an optional callback function that will be executed once setState is completed and the component is re-rendered. Generally we recommend using componentDidUpdate() for such logic instead.\nYou may optionally pass an object as the first argument to setState() instead of a function",
      "notebookId": 22,
      "id": 44
    },
    {
      "title": "sphenoid and ethmoid pictures",
      "date": "2019-09-25",
      "topics": "sphenoid bone, ethmoid bone",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573056022/capstone/znvd8w7sdy2asjpdiwd8.png",
      "uploadedFile": {
        "path": "Screen Shot 2019-11-05 at 8.13.04 PM.png"
      },
      "instructor": "Mrs. Hobby",
      "content": "",
      "notebookId": 4,
      "id": 46
    },
    {
      "title": "login dependencies",
      "date": "2019-10-15",
      "topics": "react, dependency chart",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573056664/capstone/ku5m5ejtvu2yigai5qjd.png",
      "uploadedFile": {
        "path": "login dependencies.png"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 18,
      "id": 47
    },
    {
      "title": "nutshell 2 dependency tree",
      "date": "2019-10-24",
      "topics": "group project, react",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573056701/capstone/suxeer9qkc3luomf2yjl.jpg",
      "uploadedFile": {
        "path": "nutshell-tree.JPG"
      },
      "instructor": "Brenda",
      "content": "",
      "notebookId": 18,
      "id": 48
    },
    {
      "title": "Skull anatomy (labeled picture)",
      "date": "2018-07-12",
      "topics": "skull, anatomy",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573058234/capstone/zhn88qehjwh2mpcxntt4.png",
      "uploadedFile": {
        "path": "Screen Shot 2019-11-05 at 7.40.04 PM.png"
      },
      "instructor": "dr. Lewis",
      "content": "",
      "notebookId": 4,
      "id": 50
    },
    {
      "title": "haha",
      "date": "2019-11-20",
      "topics": "",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573613021/capstone/jcjfhhuagaoxl3llrrws.jpg",
      "uploadedFile": {
        "path": "aryn.jpg"
      },
      "instructor": "haha",
      "content": "mjhgfjdhm,iPh",
      "notebookId": 4,
      "id": 51
    },
    {
      "title": "brachial plexus",
      "date": "2019-11-13",
      "topics": "anatomy, nervous system",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573749433/capstone/kqaod55qinu4xxahxraa.png",
      "uploadedFile": {
        "path": "brachial plexus.png"
      },
      "instructor": "Dr. lewis",
      "content": "Runs from the lateral border of the 1st rib to the inferior border of the teres major. It is divided into 3 different divisions based on relationship to pectorals minor. … PART 1. It is superior to the pic minor and has one branch (superior thoracic) …. PART 2. It is deep to the pec minor and has 2 branches (1). Thoracoacromial branch and (2.) the lateral thoracic branch….. PART 3: inferior to pec minor. It has 3 branches…. (1) Subscapular branch which contains (circumflex scapular, thoracodorsal bb.) (2) Anterior Circumflex Humeral (3) Posterior Circumflex Humeral…… Axillary artery is a continuation of the Subclavian artery. The three parts are also known as the proximal: enclosed in a sheath with veins and brachioplexus. Posterior: deep to pec minor and Distal which is from pec minor to inf. Border of the trees major",
      "notebookId": 4,
      "id": 53
    },
    {
      "title": "brachial plexus ",
      "date": "",
      "topics": "axillary artery, anatmoy, nervous system",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573753359/capstone/sjyihpy7mfa7jibvimwv.png",
      "uploadedFile": {
        "path": "axillary artery.png"
      },
      "instructor": "dr lewis",
      "content": "Runs from the lateral border of the 1st rib to the inferior border of the teres major. It is divided into 3 different divisions based on relationship to pectorals minor. … PART 1. It is superior to the pic minor and has one branch (superior thoracic) …. PART 2. It is deep to the pec minor and has 2 branches (1). Thoracoacromial branch and (2.) the lateral thoracic branch….. PART 3: inferior to pec minor. It has 3 branches…. (1) Subscapular branch which contains (circumflex scapular, thoracodorsal bb.) (2) Anterior Circumflex Humeral (3) Posterior Circumflex Humeral…… Axillary artery is a continuation of the Subclavian artery. The three parts are also known as the proximal: enclosed in a sheath with veins and brachioplexus. Posterior: deep to pec minor and Distal which is from pec minor to inf. Border of the trees major",
      "notebookId": 4,
      "id": 54
    },
    {
      "title": "axillary artery",
      "date": "2019-11-14",
      "topics": "brachial plexus, anatomy, arteries",
      "imageURL": "https://res.cloudinary.com/dicoaixm8/image/upload/v1573753775/capstone/tzc2oi8ickpv9zxaljg0.png",
      "uploadedFile": {
        "path": "axillary artery.png"
      },
      "instructor": "Dr. Lewis",
      "content": "Runs from the lateral border of the 1st rib to the inferior border of the teres major. It is divided into 3 different divisions based on relationship to pectorals minor. … PART 1. It is superior to the pic minor and has one branch (superior thoracic) …. PART 2. It is deep to the pec minor and has 2 branches (1). Thoracoacromial branch and (2.) the lateral thoracic branch….. PART 3: inferior to pec minor. It has 3 branches…. (1) Subscapular branch which contains (circumflex scapular, thoracodorsal bb.) (2) Anterior Circumflex Humeral (3) Posterior Circumflex Humeral…… Axillary artery is a continuation of the Subclavian artery. The three parts are also known as the proximal: enclosed in a sheath with veins and brachioplexus. Posterior: deep to pec minor and Distal which is from pec minor to inf. Border of the trees major",
      "notebookId": 28,
      "id": 55
    }
  ],
  "reviews": [
    {
      "id": 2,
      "userId": 2,
      "username": "sage",
      "noteId": 14,
      "ratingTitle": "Thanks",
      "review": "solid notes. appreciate ya",
      "rating": 4
    },
    {
      "id": 3,
      "userId": 3,
      "username": "aryn",
      "noteId": 2,
      "ratingTitle": "Thanks",
      "review": "misssed this day in class, Solid notes, friend. thanks for posting them",
      "rating": 4
    },
    {
      "id": 6,
      "userId": 7,
      "username": "leigh",
      "noteId": 11,
      "ratingTitle": "Thanks",
      "review": "misssed this day in class, Solid notes, friend. thanks for posting them",
      "rating": 4
    },
    {
      "id": 8,
      "userId": 12,
      "username": "keaton",
      "noteId": 16,
      "ratingTitle": "sick",
      "review": "sick notes man",
      "rating": 2
    },
    {
      "id": 11,
      "userId": 5,
      "username": "taylor",
      "noteId": 12,
      "ratingTitle": "Thanks",
      "review": "solid notes. appreciate ya",
      "rating": 5
    },
    {
      "id": 13,
      "userId": 12,
      "username": "keaton",
      "noteId": 8,
      "ratingTitle": "sick",
      "review": "sick notes man",
      "rating": 5
    },
    {
      "ratingTitle": "mo added this one yo",
      "userId": 3,
      "username": "yo",
      "rating": 4,
      "review": "lol",
      "noteId": 17,
      "id": 14
    },
    {
      "ratingTitle": "wow",
      "userId": 3,
      "username": "aryn",
      "rating": 1,
      "review": "THESE NOTES SUCK. GO HOME",
      "noteId": 11,
      "id": 16
    },
    {
      "ratingTitle": "wowwwww",
      "userId": 3,
      "username": "aryn",
      "rating": 1,
      "review": "were you even in class today? jesus christ",
      "noteId": 2,
      "id": 18
    },
    {
      "ratingTitle": "great job",
      "userId": 3,
      "username": "aryn",
      "rating": 5,
      "review": "keep up the good work! thanks for sharing these awesome notes!",
      "noteId": 42,
      "id": 19
    },
    {
      "ratingTitle": "wow",
      "userId": 3,
      "username": "aryn",
      "rating": 5,
      "review": "really great notes, thank you",
      "noteId": 42,
      "id": 20
    },
    {
      "ratingTitle": "great notes",
      "userId": 3,
      "username": "aryn",
      "rating": 4,
      "review": "thanks for adding these notes. missed this day of class",
      "noteId": 40,
      "id": 21
    }
  ],
  "tasks": [
    {
      "taskName": "eat foods",
      "completed": true,
      "date": "2019-10-17",
      "userId": 4,
      "id": 12
    },
    {
      "id": 13,
      "taskName": "working now",
      "completed": false,
      "date": "2019-01-01",
      "userId": 4
    },
    {
      "id": 14,
      "taskName": "eat food ",
      "completed": true,
      "date": "2019-10-26",
      "userId": 4
    },
    {
      "taskName": "Study react2",
      "completed": false,
      "date": "2019-10-31",
      "userId": 2,
      "id": 17
    },
    {
      "taskName": "Study react2",
      "completed": false,
      "date": "2019-10-31",
      "userId": 1,
      "id": 18
    },
    {
      "taskName": "Study react",
      "completed": false,
      "date": "2019-11-01",
      "userId": 21,
      "id": 19
    },
    {
      "taskName": "woop woop",
      "completed": false,
      "date": "2019-01-01",
      "userId": 22,
      "id": 21
    },
    {
      "id": 22,
      "taskName": "get new laptop charger",
      "completed": false,
      "date": "2019-11-10",
      "userId": 3
    },
    {
      "taskName": "meet w/ advisor",
      "completed": false,
      "date": "2019-11-14",
      "userId": 3,
      "id": 23
    },
    {
      "taskName": "finish this demo",
      "completed": false,
      "date": "2019-11-14",
      "userId": 3,
      "id": 24
    }
  ],
  "deadlines": [
    {
      "title": "ROUND TABLE TALKSS",
      "date": "2019-10-24",
      "userId": 4,
      "id": 2
    },
    {
      "id": 4,
      "title": "lalalala momo",
      "date": "2019-01-01",
      "userId": 4
    },
    {
      "id": 5,
      "title": "work on capstone!!",
      "date": "2019-10-25",
      "userId": 4
    },
    {
      "title": ".jkgh,fhdg",
      "date": "2019-10-11",
      "userId": 22,
      "id": 12
    },
    {
      "title": "thanksgiving break starts",
      "date": "2019-11-27",
      "userId": 3,
      "id": 14
    },
    {
      "title": "thanksgiving day",
      "date": "2019-11-28",
      "userId": 3,
      "id": 15
    }
  ],
  "friends": [
    {
      "userId": 5,
      "friendInitiate": 1,
      "id": 10
    },
    {
      "userId": 3,
      "friendInitiate": 2,
      "id": 12
    },
    {
      "userId": 2,
      "friendInitiate": 4,
      "id": 28
    },
    {
      "userId": 5,
      "friendInitiate": 4,
      "id": 29
    },
    {
      "userId": 2,
      "friendIntiate": 5,
      "id": 30
    },
    {
      "userId": 1,
      "friendInitiate": 5,
      "id": 31
    },
    {
      "userId": 2,
      "friendInitiate": 6,
      "id": 32
    },
    {
      "userId": 4,
      "friendInitiate": 5,
      "id": 36
    },
    {
      "userId": 3,
      "friendInitiate": 5,
      "id": 37
    },
    {
      "userId": 2,
      "friendInitiate": 1,
      "id": 41
    },
    {
      "userId": 4,
      "friendInitiate": 1,
      "id": 42
    },
    {
      "userId": 9,
      "friendInitiate": 10,
      "id": 50
    },
    {
      "userId": 3,
      "friendInitiate": 10,
      "id": 51
    },
    {
      "userId": 6,
      "friendInitiate": 15,
      "id": 52
    },
    {
      "userId": 8,
      "friendInitiate": 16,
      "id": 58
    },
    {
      "userId": 3,
      "friendInitiate": 16,
      "id": 59
    },
    {
      "userId": 20,
      "friendInitiate": 21,
      "id": 60
    },
    {
      "userId": 19,
      "friendInitiate": 21,
      "id": 61
    },
    {
      "userId": 5,
      "friendInitiate": 21,
      "id": 62
    },
    {
      "userId": 2,
      "friendInitiate": 21,
      "id": 63
    },
    {
      "userId": 1,
      "friendInitiate": 22,
      "id": 64
    },
    {
      "userId": 4,
      "friendInitiate": 3,
      "id": 65
    },
    {
      "userId": 1,
      "friendInitiate": 3,
      "id": 66
    },
    {
      "userId": 21,
      "friendInitiate": 2,
      "id": 71
    },
    {
      "userId": 5,
      "friendInitiate": 2,
      "id": 72
    },
    {
      "userId": 7,
      "friendInitiate": 2,
      "id": 73
    },
    {
      "userId": 5,
      "friendInitiate": 7,
      "id": 74
    },
    {
      "userId": 3,
      "friendInitiate": 7,
      "id": 75
    },
    {
      "userId": 4,
      "friendInitiate": 7,
      "id": 76
    },
    {
      "userId": 12,
      "friendInitiate": 7,
      "id": 77
    },
    {
      "userId": 7,
      "friendInitiate": 3,
      "id": 78
    }
  ],
  "users": [
    {
      "id": 1,
      "username": "heidi",
      "name": "heidi",
      "password": "heidi",
      "url": "heidi.jpeg"
    },
    {
      "username": "sage",
      "name": "sage",
      "password": "sage",
      "url": "sage.jpeg",
      "id": 2
    },
    {
      "username": "aryn",
      "password": "aryn",
      "name": "aryn",
      "url": "aryn.jpeg",
      "id": 3
    },
    {
      "username": "taylor",
      "name": "taylor",
      "password": "taylor",
      "url": "taylor.jpg",
      "id": 4
    },
    {
      "username": "nate",
      "name": "nate",
      "password": "nate",
      "url": "nate.jpeg",
      "id": 5
    },
    {
      "username": "phil",
      "name": "phil",
      "password": "phil",
      "url": "phil2.png",
      "id": 6
    },
    {
      "username": "leigh",
      "name": "leigh",
      "password": "leigh",
      "url": "leigh.jpeg",
      "id": 7
    },
    {
      "username": "quin",
      "name": "quin",
      "password": "quin",
      "url": "quin.jpeg",
      "id": 8
    },
    {
      "username": "mark",
      "name": "mark",
      "password": "mark",
      "url": "mark.jpeg",
      "id": 9
    },
    {
      "username": "lauren",
      "name": "lauren",
      "password": "lauren",
      "url": "lauren.jpeg",
      "id": 10
    },
    {
      "username": "nick",
      "name": "nick",
      "password": "nick",
      "url": "nick.jpeg",
      "id": 11
    },
    {
      "username": "keaton",
      "name": "keaton",
      "password": "keaton",
      "url": "keaton.jpg",
      "id": 12
    },
    {
      "username": "dylan",
      "name": "dyaln",
      "password": "dyaln",
      "url": "dylan.jpeg",
      "id": 13
    },
    {
      "username": "summer",
      "password": "summer",
      "name": "summer",
      "url": "summer.jpeg",
      "id": 14
    },
    {
      "username": "seth",
      "password": "seth",
      "name": "seth",
      "url": "seth.jpg",
      "id": 15
    },
    {
      "username": "chandler",
      "password": "chandler",
      "name": "chandler",
      "url": "chandler.jpeg",
      "id": 16
    },
    {
      "username": "momo",
      "password": "momo",
      "name": "mo",
      "url": "mo.jpg",
      "id": 18
    },
    {
      "username": "madi",
      "password": "madi",
      "name": "madi",
      "url": "madi.jpg",
      "id": 19
    },
    {
      "username": "brenda",
      "password": "brenda",
      "name": "brenda",
      "url": "brenda.png",
      "id": 20
    },
    {
      "username": "stephen",
      "password": "stephen",
      "name": "stephen",
      "url": "stephen.jpeg",
      "id": 21
    },
    {
      "username": "gradi",
      "password": "gradi",
      "name": "gradi",
      "url": "gradi.jpeg",
      "id": 22
    },
    {
      "username": "david",
      "password": "david",
      "name": "david",
      "url": "david.png",
      "id": 23
    },
    {
      "username": "alex",
      "password": "alex",
      "name": "alex",
      "id": 24
    },
    {
      "username": "alex",
      "password": "alex",
      "name": "alex",
      "id": 25
    },
    {
      "username": "seth",
      "password": "seth",
      "name": "seth",
      "id": 26
    }
  ],
  "notebooks": [
    {
      "id": 4,
      "subject": "Aryn's Anatomy Notebook",
      "userId": 3
    },
    {
      "id": 5,
      "subject": "Aryn's physics Notebook",
      "userId": 3
    },
    {
      "subject": "Nate's CSS",
      "userId": 5,
      "id": 6
    },
    {
      "subject": "Taylor's React Notes",
      "userId": 4,
      "id": 7
    },
    {
      "id": 9,
      "subject": "Resistance Training Notebook",
      "userId": 3
    },
    {
      "subject": "Taylor's CSS",
      "userId": 4,
      "id": 10
    },
    {
      "subject": "Phil's React",
      "userId": 6,
      "id": 11
    },
    {
      "subject": "Heidi's CSS Notebook",
      "userId": 1,
      "id": 13
    },
    {
      "id": 14,
      "subject": "Quin's CSS Notebook",
      "userId": 8
    },
    {
      "subject": "Heidi's React Notebook",
      "userId": 1,
      "id": 15
    },
    {
      "subject": "Stephen's Notebook",
      "userId": 21,
      "id": 17
    },
    {
      "subject": "Aryn's React Notebook",
      "userId": 3,
      "id": 18
    },
    {
      "subject": "NSS notes and documents",
      "userId": 2,
      "id": 20
    },
    {
      "subject": "React",
      "userId": 2,
      "id": 21
    },
    {
      "subject": "React",
      "userId": 7,
      "id": 22
    },
    {
      "subject": "hahaha",
      "userId": 2,
      "id": 25
    },
    {
      "subject": "anotherone",
      "userId": 2,
      "id": 26
    },
    {
      "subject": "physiology",
      "userId": 3,
      "id": 27
    },
    {
      "subject": "anatomy 2",
      "userId": 3,
      "id": 28
    }
  ]
}